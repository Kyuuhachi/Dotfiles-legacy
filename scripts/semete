#!/usr/bin/env python3
import os
import termios
import Xlib.display
import Xlib.XK
import re
from contextlib import contextmanager
from Xlib import X

@contextmanager
def opentty():
	tty = os.open("/dev/tty", os.O_NOCTTY | os.O_RDWR)
	attrs_save = termios.tcgetattr(tty)
	attrs = list(attrs_save)
	attrs[3] &= ~termios.ECHO & ~termios.ICANON
	termios.tcsetattr(tty, termios.TCSANOW, attrs)

	try:
		yield tty
	finally:
		termios.tcsetattr(tty, termios.TCSAFLUSH, attrs_save)
		os.close(tty)

n = os.get_terminal_size().lines - 1

# Ensure sufficient scrollback
with opentty() as tty:
	if tty is not None:
		os.write(tty, b"\x1B[6n")
		line = int(os.read(tty, 256)[2:-1].split(b";")[0])-1
		if line < 10:
			numExtra = max(10-line, 0)
			os.write(tty, b"\x1B[r" + b"\x1BM"*numExtra + b"\x1B[11;1f")

re_bold = re.compile("(?:(.)\x08\\1)+")
re_ulin = re.compile("(?:_\x08.)+")

try:
	winid = int(os.environ["WINDOWID"])
except Exception:
	os.execvp("less", ["less"])
	exit()
display = Xlib.display.Display()
win = display.create_resource_object("window", winid)

params = dict(
	window=winid,
	time=Xlib.X.CurrentTime,
	root=display.screen().root,
	child=Xlib.X.NONE,
	root_x=0, root_y=0,
	event_x=0, event_y=0,
	state=0,
)

def stdin():
	try:
		while True:
			yield input()
	except EOFError:
		return

for i, l in enumerate(stdin(), 1):
	if 1:
		# l = l.decode(errors="surrogateescape")
		l = re_bold.sub(lambda a: "\x1B[1m"+a.group()[2::3]+"\x1B[22m", l)
		l = re_ulin.sub(lambda a: "\x1B[3m"+a.group()[2::3]+"\x1B[23m", l) # 3/23 is italics; 4/24 for underline
		# l = l.encode(errors="surrogateescape")
	if i == n:
		with opentty() as tty:
			if tty is not None:
				os.write(tty, b"\x1B[6n")
				os.read(tty, 256)
				
				# This might have side effects?
				win.send_event(Xlib.protocol.event.EnterNotify(detail=4, **params, flags=0, mode=Xlib.X.NotifyGrab))
				win.send_event(Xlib.protocol.event.ButtonPress(detail=4, **params, same_screen=True))
				win.send_event(Xlib.protocol.event.ButtonRelease(detail=4, **params, same_screen=True))
				display.sync()

			print(l)

			if tty is not None:
				os.write(tty, b"\x1B[6n")
				os.read(tty, 256)

				win.send_event(Xlib.protocol.event.EnterNotify(detail=4, **params, flags=0, mode=Xlib.X.NotifyGrab))
				win.send_event(Xlib.protocol.event.ButtonPress(detail=5, **params, same_screen=True))
				win.send_event(Xlib.protocol.event.ButtonRelease(detail=5, **params, same_screen=True))
				display.sync()
	else:
		print(l)

display.close()
