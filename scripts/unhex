#!/usr/bin/env python3
import sys
import binascii
import struct
import encodings
import pathlib
import argparse

p = argparse.ArgumentParser()
p.add_argument("-a", "--all-encodings", action="store_true", help="check all encodings")
p.add_argument("hex", nargs="+")
args = p.parse_args()

encs = ["ascii", "latin1", "utf-8", "cp932", "sjis", "gbk"]

if args.all_encodings:
	for e in sorted(pathlib.Path(encodings.__file__).parent.iterdir()):
		try: mod = __import__("encodings." + e.stem, fromlist=["*"])
		except ImportError: continue

		try: info = mod.getregentry()
		except AttributeError: continue

		if not info._is_text_encoding: continue
		if info.name == "undefined": continue

		encs.append(info.name)

def parse_hex():
	a = bytearray()
	for arg in args.hex:
		if arg.startswith("0x"): arg = arg[2:]
		a.extend(binascii.a2b_hex(arg))
	return bytes(a)

def parse_dec():
	return bytes(map(int, ",".join(args.hex).replace(",,",",").strip(",").split(",")))

try:
	a = parse_hex()
except ValueError:
	a = parse_dec()

if not a:
	print("Input is empty", file=sys.stderr)
	sys.exit()

seen = set()
for e in encs:
	try:
		s = a.decode(e)
	except UnicodeError:
		try: s = a.decode(e, errors="replace")
		except: continue
	s = "".join(s if s.isprintable() else "�" for s in s)
	if s.count("�") / len(s) < 0.3 and s not in seen:
		print(e, "=", s)
		seen.add(s)

if len(a) <= 8:
	leu = int.from_bytes(a, "little")
	les = int.from_bytes(a, "little", signed=True)
	beu = int.from_bytes(a, "big")
	bes = int.from_bytes(a, "big", signed=True)
	print("LE", "=", f"{leu} ({les})" if leu != les else leu)
	print("BE", "=", f"{beu} ({bes})" if beu != bes else beu)
if len(a) == 4:
	print("LE float", "=", struct.unpack("<f", a)[0])
	print("BE float", "=", struct.unpack(">f", a)[0])
if len(a) == 8:
	print("LE double", "=", struct.unpack("<d", a)[0])
	print("BE double", "=", struct.unpack(">d", a)[0])
