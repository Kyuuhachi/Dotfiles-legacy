#!/usr/bin/env python3
import sys
import os
import os.path
import stat as s

import signal
signal.signal(signal.SIGINT, signal.SIG_DFL)
signal.signal(signal.SIGPIPE, signal.SIG_DFL)

suffixes = {}

colors = { # Copied from coreutils ls.c
	b"lc": b"\x1B\x5B",  # lc: Left of color sequence
	b"rc": b"m",         # rc: Right of color sequence
	b"ec": b"",          # ec: End color (replaces lc+rs+rc)
	b"rs": b"0",         # rs: Reset to ordinary colors

	b"no": b"",          # no: Normal
	b"fi": b"",          # fi: File: default
	b"di": b"01;34",     # di: Directory: bright blue
	b"ln": b"01;36",     # ln: Symlink: bright cyan
	b"pi": b"33",        # pi: Pipe: yellow/brown
	b"so": b"01;35",     # so: Socket: bright magenta
	b"bd": b"01;33",     # bd: Block device: bright yellow
	b"cd": b"01;33",     # cd: Char device: bright yellow
	b"mi": b"",          # mi: Missing file: undefined
	b"or": b"",          # or: Orphaned symlink: undefined
	b"ex": b"01;32",     # ex: Executable: bright green
	b"do": b"01;35",     # do: Door: bright magenta
	b"su": b"37;41",     # su: setuid: white on red
	b"sg": b"30;43",     # sg: setgid: black on yellow
	b"st": b"37;44",     # st: sticky: black on blue
	b"ow": b"34;42",     # ow: other-writable: blue on green
	b"tw": b"30;42",     # tw: ow w/ sticky: black on green
	b"ca": b"30;41",     # ca: black on red
	b"mh": b"",          # mh: disabled by default
	b"cl": b"\x1B\x5BK", # cl: clear to end of line
}

for line in os.environb.get(b"LS_COLORS", b"").rstrip(b":").split(b":"):
	if b"=" not in line:
		print("Invalid LS_COLOR statement: %r" % line, file=sys.stderr)
		continue

	k, v = line.split(b"=", 1)

	if k.startswith(b"*"):
		suffixes[k[1:]] = v
	elif k in colors:
		if v in {b"0", b"00"}: v = b""
		colors[k] = v
	else:
		print("Invalid LS_COLOR statement: %r" % line, file=sys.stderr)

c_start = colors[b"lc"] # \e[
c_mid = colors[b"rc"]   # m
c_end = colors[b"ec"] or colors[b"lc"] + colors[b"rs"] + colors[b"rc"] # \e[0m
colored = c_start + b"%s" + c_mid + b"%s" + c_end

def find_type(path):
	paths = [path]
	if os.environb.get(b"GIT_PREFIX"):
		paths.insert(0, os.path.join(os.environb[b"GIT_PREFIX"], path))

	for p in paths:
		try:
			stat = os.lstat(p)
			break
		except OSError:
			pass
	else:
		return b"mi"

	mode = stat.st_mode

	if s.S_ISREG(mode):
		if   mode & s.S_ISUID  and colors[b"su"]: return b"su"
		elif mode & s.S_ISGID  and colors[b"sg"]: return b"sg"
		# elif has_capability    and colors[b"ca"]: return b"ca"
		elif mode & 0o111      and colors[b"ex"]: return b"ex"
		elif stat.st_nlink > 1 and colors[b"mh"]: return b"mh"
		else: return b"fi"

	elif s.S_ISDIR(mode):
		if   mode & s.S_ISVTX \
		and  mode & s.S_IWOTH and colors[b"tw"]: return b"tw"
		elif mode & s.S_IWOTH and colors[b"ow"]: return b"ow"
		elif mode & s.S_ISVTX and colors[b"st"]: return b"st"
		else: return b"di"

	elif s.S_ISLNK (mode): return b"ln"
	elif s.S_ISFIFO(mode): return b"pi"
	elif s.S_ISSOCK(mode): return b"so"
	elif s.S_ISBLK (mode): return b"bd"
	elif s.S_ISCHR (mode): return b"cd"
	elif s.S_ISDOOR(mode): return b"do"
	else: return b"or"

def do_color(path):
	type = find_type(path)

	color = None

	if type == b"fi":
		for k, v in suffixes.items():
			if path.endswith(k):
				color = v
				break

	return color or colors[type] or colors[b"no"] or b""

def colorize(it):
	for path in it:
		color = do_color(path)
		pos = path[:-1].rfind(b"/") + 1
		dir, name = (path[:pos], path[pos:]) if pos else (b"", path)
		yield colored % (color+b";2", dir) + colored % (color, name)

def read_lines():
	carry = b""
	while True:
		b = os.read(0, 1<<12)
		if not b: break
		*lines, carry = (carry+b).split(b"\n")
		for line in lines:
			yield line
	assert not carry

for line in colorize(read_lines()):
	os.write(1, line + b"\n")
